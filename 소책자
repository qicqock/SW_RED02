https://ko.wikipedia.org/wiki/%EC%98%A4%ED%94%88_%EC%86%8C%EC%8A%A4

오픈 소스란?
오픈 소스(open source)는 소프트웨어 혹은 하드웨어의 제작자의 권리를 지키면서 원시 코드를 누구나 열람할 수 있도록 한 소프트웨어 혹은 오픈 소스 라이선스에 준하는 모든 통칭을 일컫는다. 어원에 대해서는 History of the OSI 자료에 따르면, 1998년 2월 3일에 넷스케이프 브라우저의 원시 코드에 대해 어떠한 형태로 공개할까하는 전략회의에서 붙여진 새로운 용어라고 설명되어 있다.
출처 : https://ko.wikipedia.org/wiki/%EC%98%A4%ED%94%88_%EC%86%8C%EC%8A%A4

오픈소스 개발의 배경과 역사?
* 9. IT 역사에서 오픈소스
* 10. 10 1960년대  하드웨어 판매 중심  소프트웨어 공유 문화 소프트웨어 공유 문화
* 11. 11 1970년대  벨 연구소에 의해 Unix 개발  AT&T를 비롯한 여러 회사, 버클리 등 비영리 단체에서 다양한 버전 개발  1980년대 HP/UX, AIX, Solaris 등의 상용 버전 Unix 개발 및 상용화
* 12. 12 1976년  빌게이츠가 컴퓨터 애호가들에게 보내는 공개 편지 “Open Letter to Hobbyists”  1976년 친구 폴 앨런과 MITS Altair 8800을 위한 베이식 인터프리터 제조 후 MITS를 통해 판매  소프트웨어 저작권에 대한 인지, 시작된 상업용 소프트웨어 시대  모든 코드를 비공개 형태로 만들어 버리게 되는 계기 상용 소프트웨어의 등장
* 13. 13 1984 ~ 1986년  리처드 스톨만  자유 소프트웨어 운동 주도  상용 소프트웨어에 대항한 자유로운 대안을 만들기 위한 의지  GNU is Not a Unix(GNU) 프로젝트 시작  Text editor(Emacs), Compiler(gcc), Debugger(gdb), make 개발  Free Software 운동 시작 후 자유소프트웨어 재단(FSF) 설립  1989년 최초의 오픈소스 라이선스 GNU General Public License 배포 자유소프트웨어 운동
* 14. 14 1991년  리눅스의 탄생  핀란드 헬싱키 대학의 대학원생인, 리누스 토발즈가 취미로 개발한 커널  핀란드 대학 3학년, MINIX를 응용하여 리눅스 커널 개발 후 GNU GPL로 배포 1992년  Linux Desktop GUI 프로젝트, Xfree86 시작 1993년  GNU/Linux 구현체 Debian, Slackware 시작 Linux의 탄생
* 15. 15 1998년  넷스케이프 브라우저 코드에 대한 공개 형태를 결정하는 전략회의에서 붙여진 용어  넷스케이스 소스 코드 공개에 자극 받아, 오픈소스를 장려하기 위한 단체인 OSI(Open Source Initiative) 설립 오픈소스라는 이름
* 16. 16 2000년대 이후  많은 기업들이 오픈소스를 사용  상용 소프트웨어 벤더에서도 오픈소스를 가져다가 사용하기 시작  특히, 웹 기반 서비스(예: SNS) 업체에서 오픈소스 활용 폭발적 증가  구글, 아마존, 넷플릭스, 인텔, 오라클, IBM 등 오픈소스의 발전
* 17. 오픈소스의 현재
* 18. 18 오픈소스의 확대 – 이제는 거의 모든 분야 운영체제 웹서버/미들웨어 데이터베이스 기타
* 19. 19 오픈소스의 확대 – 프로젝트와 참여의 비약적 증가 BLACK DUCK KNOWLEDGEBASE 100B lines of code 10M people Source: 2014 Future of Open Source Survey Results
* 20. 20 오픈소스는 IT 업계의 대세… Source: 2015 Future of Open Source Survey Results
* 21. 21 오픈소스 블럭으로 원하는 것을 쉽게 구현… Source: 2015 Future of Open Source Survey Results
출처 : https://www.slideshare.net/JerryJeong2/ss-58804386

오픈 소스 개발의 장,단점
장점
무료 oss를 활용한 라이선스 비용절감
특정 소프트웨어 및 하드웨어의 종속성 탈피
기존에 개발된 oss소스 코드를 활용한 빠른 개발

단점
자유로운 개발에 따른 체계적이지 못한 문서
무료인 oss 사용에 따른 제품보증(책임 회피) 및 유지 보수의 어려움
oss라이센스 미준수(한국 저작권 위원회 참고)에 따른 저작권법 위반 및 특허 소송의 위험성

출처]
https://m.blog.naver.com/PostView.nhn?blogId=blue91822&logNo=220260286450&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F
http://www.ciokorea.com/news/19907


오픈 소스 개발에 참여중인 회사
구글
카카오 : http://biz.chosun.com/site/data/html_dir/2017/07/03/2017070302258.html
애플 : http://biz.chosun.com/site/data/html_dir/2016/12/11/2016121100273.html
{
	AI 생태계에서 우위를 점하기 위한 전략이라고 분석한다. 애플리케이션 프로그래밍 인터페이스(API)를 공개함으로써 고객사가 될 만한 업체들을 우군(友軍)으로 두고, 자사에 유리한 AI 생태계를 만들어나가는 것이 주 목적
}
마이크로소프트 : http://biz.chosun.com/site/data/html_dir/2016/11/30/2016113003209.html
:
:


원문보기: 
http://biz.chosun.com/site/data/html_dir/2016/12/11/2016121100273.html?query=%EC%B9%B4%EC%B9%B4%EC%98%A4+%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4&x=0&y=0#csidx19409d5d2bf06ab8d8128d00226004f 
링크 http://www.bloter.net/archives/197960


해결 할 문제_
오픈소스 단점의 해결방안
구글, 마이크로소프트와 같이 폐쇄적 프로그래밍을 고수하던 거대 기업들이 오픈소스 개발 방식을 지향하는 이유?
관련 자료의 신뢰성




오픈소스 사례 조사 하기_ 과거에 오픈소스를 배척하던 회사들이 오픈소스를 지향하는 이유?

오픈소스의 성공적 사례
- Firefox
	모질라 파이어폭스(Mozilla Firefox)는 모질라 재단과 모질라 코퍼레이션이 개발하는 자유 소프트웨어 웹 브라우저로 윈도우, 리눅스, OS X 그리고 안드로이드에서 실행할 수 있다. 이 브라우저는 2014년 2월 기준, 전 세계 웹 브라우저 시장 점유율 약 12%~22%를 차지하고 있으며 지역에 따라 두 번째나 세 번째로 가장 많이 쓰이는 웹 브라우저이다. 모질라에 따르면 전 세계 4억 5천만명 이상의 사용자가 있다고 한다. 특히, 인도네시아, 이란, 독일, 폴란드에서는 가장 인기 있는 웹 브라우저로 각각 55%, 46%, 43%, 41%의 시장 점유율을 기록하고 있다.     /https://ko.wikipedia.org/wiki/모질라_파이어폭스
- Eclipse
	이클립스(영어: Eclipse)는 다양한 플랫폼에서 쓸 수 있으며, 자바를 비롯한 다양한 언어를 지원하는 프로그래밍 통합 개발 환경을 목적으로 시작하였으나, 현재는 OSGi를 도입하여, 범용 응용 소프트웨어 플랫폼으로 진화하였다. 자바로 작성되어 있으며, 자유 소프트웨어이지만 막강한 기능을 자랑한다. 2004년과 2005년 졸트 어워드(Jolt Award)를 수상했다. 식(蝕)을 뜻하는 이클립스란 이름은 자바를 개발한 회사의 Sun이란 이름을 염두에 두었다는 말도 있어 2003년도에 썬 마이크로시스템즈는 이클립스 재단에 참여하지 않았던 이유 중의 하나였지만 2005년도에 열린 EclipseCon의 키노트에서 Lee Nackman은 그 목적은 원래 마이크로소프트와 비주얼 스튜디오 생태 시스템을 겨냥한 것이었다고 말했다. [1] 원래 IBM의 웹스피어 스튜디오 애플리케이션 디밸로퍼(WebSpheare Studio Application Developer)란 이름으로 개발되었던 것인데, 엔진부분을 오픈소스로 공개한 것을 기반으로 지금의 이클립스로 발전해 왔다.		/https://ko.wikipedia.org/wiki/%EC%9D%B4%ED%81%B4%EB%A6%BD%EC%8A%A4_(%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)
- Android    /https://github.com/wasabeef/awesome-android-libraries
	안드로이드(영어: Android)는 휴대 전화를 비롯한 휴대용 장치를 위한 운영 체제와 미들웨어, 사용자 인터페이스 그리고 표준 응용 프로그램(웹 브라우저, 이메일 클라이언트, 단문 메시지 서비스(SMS), 멀티미디어 메시지 서비스(MMS)등)을 포함하고 있는 소프트웨어 스택이자 모바일 운영 체제이다. 안드로이드는 개발자들이 자바 언어로 응용 프로그램을 작성할 수 있게 하였으며, 컴파일된 바이트코드를 구동할 수 있는 런타임 라이브러리를 제공한다. 또한 안드로이드 소프트웨어 개발 키트(SDK)를 통해 응용 프로그램을 개발하는 데 필요한 각종 도구와 API를 제공한다.   /https://ko.wikipedia.org/wiki/안드로이드_(운영_체제)


오픈 소스의 실패 사례       http://www.ciokorea.com/slideshow/18933
- 솔루스 os
- 드림리눅스
- 콴트 os
- 다아스포라
- 첨비 플랫폼


과거에 오픈소스를 배척하던 기업들이 오픈소스를 지향하게 된 사례와 이유(애플, 마이크로소프트)
- 애플 (스위프트)
	애플이 WWDC에서 전한 가장 큰 뉴스는 바로 스위프트(Swift) 개발 언어가 올해 하반기에 오픈소스 형태로 제공한다는 것이었다. 애플은 개방성 정책과는 상당히 먼 기업 중 하나였으나, 이번 발표를 통해 많은 이들의 환호를 받았다. 그러나 오픈소스 스위프트에 관한 결정은 최소한 개발자에게 있어서 많은 것을 개방하고 있는 움직임의 일련의 과정 중 하나다.      http://www.itworld.co.kr/news/93952

	Swift에 불편함을 느끼셨던 분이나, 조금 더 개선하고 싶으셨던 분은 이제 직접 코드를 수정하시고 pull-request를 보내시면 됩니다.    http://kyejusung.com/2015/12/%EC%95%A0%ED%94%8C-%EB%89%B4%EC%8A%A4-swift%EA%B0%80-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4%EB%A1%9C-%EA%B3%B5%EA%B0%9C%EB%90%98%EC%97%88%EC%8A%B5%EB%8B%88%EB%8B%A4/

	그럼에도 불구하고 애플이 스위프트를 오픈소스로 돌린 이유는 ‘개발자 생태계 확대’를 위한 것이다. 과거 마이크로소프트가 닷넷프레임워크를 오픈소스화한 것과 일맥상통한다. 기존 애플 플랫폼 개발자를 포함해 닷넷, 파이썬, C, C++ 등을 사용하는 개발자를 끌어들이기 위한 조치다.
	다른 언어 개발자를 스위프트로 끌어들여 애플이 얻는 이득은 자사 플랫폼의 영향력 강화다.       http://www.ddaily.co.kr/news/article.html?no=137815

- 마이크로소프트 (닷넷)
	한때 오픈소스 문화는 공산주의나 다름없다고 비난하던 MS가 정말 리눅스와 오픈소스를 지지하는 입장으로 돌아선 것일까요?
	MS에서 볼 수 있는 오픈소스 문화에는 ‘닷넷재단’도 있습니다. 일반적인 기업들은 오픈소스 기술을 내부 개발팀이 다루는 편입니다. MS는 2014년 닷넷 기술을 오픈소스로 공개하면서 별도의 재단을 설립했습니다. MS는 2014년 닷넷재단을 설립한 이유를 “윈도우 뿐만 아니라 리눅스, 맥 OS, iOS, 안드로이드까지 다룰 수 있는 크로스 플랫폼을 만들기 위함이다”라고 설명하기도 했습니다. 닷넷재단을 운영하는 핵심 인물에 자마린 CTO와 비쥬얼 스튜디오 팀 디렉터 등이 있는 것을 보면, MS는 닷넷재단을 통해 모바일 개발도구에 대한 지원을 확대해 나갈 것으로 보입니다. 최근에는 아예 금전적인 후원을 하거나 특허나 법률적인 문제를 해결할 때 닷넷재단이 나서고 있습니다.        http://www.bloter.net/archives/254175

	그러나 마이크로소프트가 이것을 오픈소스로 배포한 데는 매우 실용적인 이유가 있다. 인기 자바스크립트 런타임인 노드(Node)는 현재 구글의 V8 자바스크립트 엔진에서만 한정적으로 작동한다. 따라서 샤크라를 오픈소스화하면 기존 노드 사용자를 샤크라 환경으로 끌어들여 생태계를 성장시킬 수 있다. 즉 노드를 이용하는 개발자에게 크롬뿐 아니라 엣지 브라우저에도 적용할 수 있는 선택권을 제공해 자사 브라우저 테크놀로지 시장을 확대하려는 계획인 것이다.                 http://www.ciokorea.com/news/28326

- 형상 관리 도구
	형상관리 : 협업을 가능하게 한 발전

	version control system (VCS)
		프로그램, 문서 및 모든 종류의 컨텐트의 변경 이력을 관리 하는 시스템
	"Version" "number"
		변경이 될때 마다 붙는 표지/ 번호
	"Revision"
		새로 변경된 결과물
		인덱스가 붙음

- 버전 관리 시스템 용어
	저장소(repository)
		소스(코드, 문서 , 그림 등) 를 저장하는 공간
	브렌치(branching/ branch)
		코드를 중간에 분기하는 행위/ 분기한 결과
	리비전(revision)
		특정 시간 / 특정 브렌치의 어떤 한 상태
		상태에 해당하는 인덱스를 리비전 번호(revision number) 라고 함
	커밋 (commit)
		저장소에 변경된 컨텐트를 반영하는 행위
	커밋 로그(commit log)
		커밋을 할떄 해당 커밋이 어따한 변경을 했는지 작성한 기록
	체크 아웃(checkout)
		현제 저장소를 특정한 리비전으로 업데이트
	태그(tag)
		특정 리비전을 나중에 찾거나 알아보기 쉽게 붙인 텍스트

pro git 한빛

- 중앙 집중식 버전 관리 시스템
	특징
		중심이 되는 저장소가 존재
		메인 트리가 존재함
		저장소 의존도가 크므로 branching을 쉽게 하지 않음
			중요한